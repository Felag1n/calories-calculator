import React, { useState } from 'react';
import styles from './StepsCaloriesCalculator.module.css';

const StepsCaloriesCalculator = () => {
  const [steps, setSteps] = useState('');
  
  const foodEquivalents = [
    { name: '–ì–∞–º–±—É—Ä–≥–µ—Ä', calories: 250, icon: 'üçî', unit: '—à—Ç.' },
    { name: '–ü–∏—Ü—Ü–∞', calories: 285, icon: 'üçï', unit: '–∫—É—Å–∫–æ–≤' },
    { name: '–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –±–∞—Ç–æ–Ω—á–∏–∫', calories: 230, icon: 'üç´', unit: '—à—Ç.' },
    { name: '–ë–∞–Ω–∞–Ω', calories: 105, icon: 'üçå', unit: '—à—Ç.' },
    { name: '–Ø–±–ª–æ–∫–æ', calories: 95, icon: 'üçé', unit: '—à—Ç.' },
    { name: '–ü–æ–Ω—á–∏–∫', calories: 195, icon: 'üç©', unit: '—à—Ç.' },
    { name: '–ú–æ—Ä–æ–∂–µ–Ω–æ–µ', calories: 165, icon: 'üç¶', unit: '–ø–æ—Ä—Ü–∏–π' },
    { name: '–ü–µ—á–µ–Ω—å–µ', calories: 140, icon: 'üç™', unit: '—à—Ç.' },
    { name: '–ö—Ä—É–∞—Å—Å–∞–Ω', calories: 235, icon: 'ü•ê', unit: '—à—Ç.' },
    { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', calories: 320, icon: 'üçü', unit: '–ø–æ—Ä—Ü–∏–π' }
  ];

  // –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
  const calculateCalories = (steps) => {
    return Math.round(steps * 0.04);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const calculateFoodQuantity = (burnedCalories, foodCalories) => {
    const exactQuantity = burnedCalories / foodCalories;
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–π 0.5
    const roundedQuantity = Math.round(exactQuantity * 2) / 2;
    
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 0.5, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.5
    return roundedQuantity < 0.5 ? 0.5 : roundedQuantity;
  };

  const burnedCalories = calculateCalories(Number(steps));

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  const formatQuantity = (quantity) => {
    // –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
    if (Number.isInteger(quantity)) {
      return quantity.toString();
    }
    // –ï—Å–ª–∏ —ç—Ç–æ 0.5, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ "¬Ω"
    return quantity === 0.5 ? "¬Ω" : quantity.toString();
  };

  return (
    <div className={styles.calculator}>
      <h1 className={styles.title}>
        –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π –ø–æ —à–∞–≥–∞–º
      </h1>
      
      <div className={styles.inputGroup}>
        <label className={styles.label}>
          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:
        </label>
        <input
          type="number"
          value={steps}
          onChange={(e) => setSteps(e.target.value)}
          className={styles.input}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤"
        />
      </div>

      {steps && burnedCalories > 0 && (
        <div className={styles.result}>
          <p className={styles.resultText}>
            –í—ã —Å–æ–∂–≥–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ <span className={styles.calories}>{burnedCalories}</span> –∫–∞–ª–æ—Ä–∏–π
          </p>
          <div className={styles.foodList}>
            <h3>–≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ:</h3>
            <div className={styles.foodGrid}>
              {foodEquivalents.map((food, index) => {
                const quantity = calculateFoodQuantity(burnedCalories, food.calories);
                return (
                  <div key={index} className={styles.foodGridItem}>
                    <span className={styles.foodIcon}>{food.icon}</span>
                    <div className={styles.foodInfo}>
                      <span className={styles.foodName}>{food.name}</span>
                      <span className={styles.foodCalories}>
                        {formatQuantity(quantity)} {food.unit} ({food.calories} –∫–∫–∞–ª/{food.unit.slice(0, -1)})
                      </span>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default StepsCaloriesCalculator;